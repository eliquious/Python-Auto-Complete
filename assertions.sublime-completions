{
    "scope": "source.python - meta.class.inheritance - comment - variable - string",

    "completions":
    [

    // IMPORTANT! Completions descriptions are not used due to a bug in Sublime
    // Text. Characters not in [a-z-A-Z0-9_-] are avoided in triggers too.
    // See https://github.com/SublimeTextIssues/Core/issues/1061

    {"trigger": "assertAlmostEqual", "contents": "self.assertAlmostEqual(${1:first}, ${2:expected}, places=None, msg=None" },
    {"trigger": "assertCountEqual", "contents": "self.assertCountEqual(${1:actual}, ${2:expected}, ${3:msg=None})" },
    {"trigger": "assertDictContainsSubset", "contents": "self.assertDictContainsSubset(subset, dictionary, msg=None)" },
    {"trigger": "assertDictEqual", "contents": "self.assertDictEqual(d1, d2, msg=None)" },
    {"trigger": "assertEqual", "contents": "self.assertEqual(${1:actual}, ${2:expected}${3:, msg='${4}'})" },
    {"trigger": "assertFalse", "contents": "self.assertFalse(${1:expr}, '${2}')" },
    {"trigger": "assertGreater", "contents": "self.assertGreater(${1:a}, ${2:b}, ${3:msg=None})" },
    {"trigger": "assertGreaterEqual", "contents": "self.assertGreaterEqual(${1:a}, ${2:b}, ${3:msg=None})" },
    {"trigger": "assertIn", "contents": "self.assertIn(member, container, msg=None)" },
    {"trigger": "assertIs", "contents": "self.assertIs(${1:expr1}, ${2:expr2}, ${3:msg=None})" },
    {"trigger": "assertIsInstance", "contents": "self.assertIsInstance(${1:obj}, ${2:cls}${3:, msg='${4}'})" },
    {"trigger": "assertIsNone", "contents": "self.assertIsNone(${1:obj}${2:, msg='${3}'})" },
    {"trigger": "assertIsNot", "contents": "self.assertIsNot(${1:expr1}, ${2:expr2}, ${3:msg=None})" },
    {"trigger": "assertIsNotNone", "contents": "self.assertIsNotNone(${1:obj}${2:, msg='${3}'})" },
    {"trigger": "assertLess", "contents": "self.assertLess(${1:a}, ${2:b}, ${3:msg=None})" },
    {"trigger": "assertLessEqual", "contents": "self.assertLessEqual(${1:a}, ${2:b}, ${3:msg=None})" },
    {"trigger": "assertListEqual", "contents": "self.assertListEqual(list1, list2, msg=None)" },
    {"trigger": "assertLogs", "contents": "self.assertLogs(logger=None, level=None)" },
    {"trigger": "assertMultiLineEqual", "contents": "self.assertMultiLineEqual(${1:actual}, ${2:expected}, ${3:msg=None})" },
    {"trigger": "assertNotAlmostEqual", "contents": "self.assertNotAlmostEqual(${1:first}, ${2:expected}, places=None, msg=None" },
    {"trigger": "assertNotEqual", "contents": "self.assertNotEqual(${1:actual}, ${2:expected}, ${3:msg=None})" },
    {"trigger": "assertNotIn", "contents": "self.assertNotIn(member, container, msg=None)" },
    {"trigger": "assertNotIsInstance", "contents": "self.assertNotIsInstance(${1:obj}, ${2:cls}${3:, msg='${4}'})" },
    {"trigger": "assertNotRegex", "contents": "self.assertNotRegex(text, unexpected_regex, msg=None)" },
    {"trigger": "assertRaises", "contents": "self.assertRaises(${1:exception}, msg='${2}')" },
    {"trigger": "assertRaisesRegex", "contents": "self.assertRaisesRegex(${1:exception}, ${2:expected_regex}" },
    {"trigger": "assertRegex", "contents": "self.assertRegex(text, expected_regex, msg=None)" },
    {"trigger": "assertSequenceEqual", "contents": "self.assertSequenceEqual(seq1, seq2, msg=None, seq_type=None)" },
    {"trigger": "assertSetEqual", "contents": "self.assertSetEqual(set1, set2, msg=None)" },
    {"trigger": "assertTrue", "contents": "self.assertTrue(${1:expr}, ${2:msg=None})" },
    {"trigger": "assertTupleEqual", "contents": "self.assertTupleEqual(tuple1, tuple2, msg=None)" },
    {"trigger": "assertWarns", "contents": "self.assertWarns(${1:expected_warning}, *args, **kwargs)" },
    {"trigger": "assertWarnsRegex", "contents": "self.assertWarnsRegex(${1:expected_warning}, ${2:expected_regex}" },

    ]
}
